{
  "timestamp": "2025-05-03T20:46:31.594Z",
  "repository": "https://github.com/jsayram/PizzaAndBurgersRestaurant",
  "fileCount": 9,
  "files": {
    "Burger.cs": "using System;\nusing System.Collections.Generic;\n\nnamespace PizzaBurgerOOP\n{\n    public class Burger\n    {\n        \n        public List<BurgerTopping> burgerToppingsList = new List<BurgerTopping>();\n\n        public Burger()\n        {\n\n        }\n\n        public List<BurgerTopping> AddBurgerTopping(string pt, decimal price)\n        {\n            BurgerTopping burgerTopping = new BurgerTopping();\n\n            //assign the burger topping variables\n            burgerTopping.ToppingName = pt;\n            burgerTopping.ToppingPrice = price;\n            //return burger topping\n            burgerToppingsList.Add(burgerTopping);\n\n            return burgerToppingsList;\n        }\n        public void ClearBurgerToppings()\n        {\n            burgerToppingsList.Clear();\n        }\n\n        public void ShowBurger()\n        {\n\n            Console.Clear();\n            foreach (BurgerTopping p in burgerToppingsList)\n            {\n                Console.WriteLine($\"BurgerTopping: {p.ToppingName}, BurgerToppingPrice : {p.ToppingPrice}\");\n            }\n\n        }\n\n\n        \n    }\n}\n",
    "BurgerTopping.cs": "using System;\nnamespace PizzaBurgerOOP\n{\n    public class BurgerTopping\n    {\n        private string toppingName;\n        private decimal toppingPrice;\n\n        //default constructor\n        public BurgerTopping()\n        {\n        }\n\n        //overloaded constructor\n        public BurgerTopping(string toppingName, decimal toppingPrice)\n        {\n            this.toppingName = toppingName;\n            this.toppingPrice = toppingPrice;\n        }\n\n        public string ToppingName { get => toppingName; set => toppingName = value; }\n        public decimal ToppingPrice { get => toppingPrice; set => toppingPrice = value; }\n    }\n}\n",
    "Extra.cs": "using System;\nusing System.Collections.Generic;\n\nnamespace PizzaBurgerOOP\n{\n    public class Extra\n    {\n        public Extra()\n        {\n        }\n        public static List<(string extraItemName, decimal extraItemPrice, string extraItemSize, decimal extraItemSizePrice)> extraItemsList = new List<(string extraItemName, decimal extraItemPrice, string extraItemSize, decimal extraItemSizePrice)>();\n\n        public List<(string extraItemName, decimal extraItemPrice, string extraItemSize, decimal extraItemSizePrice)> AddExtraItemToList(string extraItemName, decimal extraItemPrice, string extraItemSize, decimal extraItemSizePrice)\n        {\n            extraItemsList.Add((extraItemName, extraItemPrice, extraItemSize, extraItemSizePrice));\n            return extraItemsList;\n        }\n\n        public static Order AddExtrasToExtrasListandExtrasOrder(Extra extra, Order order,int choiceItem, int choiceSize)\n        {\n            extra.AddExtraItemToList\n            (\n                MenuItems.ExtraMenuItems.extraMenuItemsList[choiceItem - 1].itemName,\n                MenuItems.ExtraMenuItems.extraMenuItemsList[choiceItem - 1].price,\n                MenuItems.ItemSizes.itemSizesList[choiceSize - 1].itemName,\n                MenuItems.ItemSizes.itemSizesList[choiceSize - 1].price\n            );\n            order.AddToExtraOrder(extra);\n            return order;\n        }\n       \n    }\n\n}\n",
    "MenuItems.cs": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Security.Cryptography.X509Certificates;\n\nnamespace PizzaBurgerOOP\n{\n    public class MenuItems\n    {\n        public MenuItems() { }\n\n        public static class MainMenuItems\n        {\n            public static List<(int index, string itemName, decimal price)> mainMenuItemsList = new List<(int index, string itemName, decimal price)>\n            {\n              (1, \"Burger\",5.0m),\n              (2, \"Pizza\",2m),\n              (3, \"Extra\",0m),\n              (4, \"Checkout\",0m),\n            };\n\n        }\n\n        public static class PizzaToppingsMenuItems\n        {\n            public static List<(int index, string itemName, decimal price)> pizzaToppingsMenuItemsList = new List<(int index, string itemName, decimal price)>\n            {\n              (1, \"Pepperoni\",1m),\n              (2, \"Olives\",1m),\n              (3, \"Sausage\",1m)\n            };\n\n            public static Pizza ChoosePizzaToppings(int topping, Pizza pizza)\n            {\n                while (topping != 0)\n                {\n                    Console.WriteLine(\"[0] Exit Pizza Toppings\");\n                    Console.WriteLine(\"Pick your topping: \");\n                    while (!int.TryParse(Console.ReadLine(), out topping))\n                    {\n                        Console.Clear();\n                        Console.WriteLine(\"\\nChoose your Pizza Toppings\");\n                        CreateMenu(pizzaToppingsMenuItemsList);\n                        Console.WriteLine(\"[0] Exit Pizza Toppings\");\n                        Console.WriteLine(\"Pick your topping: \");\n                    }\n\n                    Console.WriteLine(\"\");\n                    if (topping > 0 && topping <= pizzaToppingsMenuItemsList.Count)\n                    {\n                        pizza.AddPizzaTopping\n                        (\n                            pizzaToppingsMenuItemsList[topping - 1].itemName,\n                            pizzaToppingsMenuItemsList[topping - 1].price\n                        );\n                        Console.WriteLine($\"\\tTopping chosen so far:\");\n                        if (pizza.pizzaToppingsList.Count < 0)\n                        {\n                            Console.WriteLine(\"\\t* NONE *\");\n                        }\n                        foreach (PizzaTopping p in pizza.pizzaToppingsList)\n                        {\n                            Console.WriteLine($\"\\t\\t\\t{p.ToppingName}\");\n                        }\n                        Console.WriteLine();\n                        CreateMenu(pizzaToppingsMenuItemsList);\n                    }\n                    if (topping > pizzaToppingsMenuItemsList.Count)\n                    {\n                        Console.WriteLine(\"\\nNot a valid topping choice, Please choose again\\n\");\n\n                        CreateMenu(pizzaToppingsMenuItemsList);\n                    }\n                }\n                return pizza;\n            }\n\n        }\n        public static class BurgerToppingsMenuItems\n        {\n            public static List<(int index, string itemName, decimal price)> burgerToppingsMenuItemsList = new List<(int index, string itemName, decimal price)>\n            {\n              (1, \"Cheese\",1m),\n              (2, \"Lettus\",1m),\n              (3, \"Pickles\",1m)\n            };\n\n            public static Burger ChooseBurgerToppings(int topping, Burger burger)\n            {\n                while (topping != 0)\n                {\n                    Console.WriteLine(\"[0] Exit Burger Toppings\");\n                    Console.WriteLine(\"Pick your topping: \");\n                    while (!int.TryParse(Console.ReadLine(), out topping))\n                    {\n                        Console.Clear();\n                        Console.WriteLine(\"\\nChoose your Burger Toppings\");\n                        CreateMenu(burgerToppingsMenuItemsList);\n                        Console.WriteLine(\"[0] Exit Burger Toppings\");\n                        Console.WriteLine(\"Pick your topping: \");\n                    }\n\n                    Console.WriteLine(\"\");\n                    if (topping > 0 && topping <= burgerToppingsMenuItemsList.Count)\n                    {\n                        burger.AddBurgerTopping\n                        (\n                            burgerToppingsMenuItemsList[topping - 1].itemName,\n                            burgerToppingsMenuItemsList[topping - 1].price\n                        );\n                        Console.WriteLine($\"\\tToppings chosen so far:\");\n                        if (burger.burgerToppingsList.Count < 0)\n                        {\n                            Console.WriteLine(\"\\t* NONE *\");\n                        }\n                        foreach (BurgerTopping b in burger.burgerToppingsList)\n                        {\n                            Console.WriteLine($\"\\t\\t\\t{b.ToppingName}\");\n                        }\n                        Console.WriteLine();\n                        CreateMenu(burgerToppingsMenuItemsList);\n                    }\n                    if (topping > burgerToppingsMenuItemsList.Count)\n                    {\n                        Console.WriteLine(\"\\nNot a valid topping choice, Please choose again\\n\");\n                        Console.WriteLine();\n                        CreateMenu(burgerToppingsMenuItemsList);\n                    }\n                }\n                return burger;\n            }\n\n        }\n        public static class ExtraMenuItems\n        {\n            public static List<(int index, string itemName, decimal price)> extraMenuItemsList = new List<(int index, string itemName, decimal price)>\n            {\n              (1, \"Fries\",0m),\n              (2, \"Drink\",0m)\n            };\n\n        }\n        public static class ItemSizes\n        {\n            public static List<(int index, string itemName, decimal price)> itemSizesList = new List<(int index, string itemName, decimal price)>\n            {\n              (1, \"Small\",5.0m),\n              (2, \"Medium\",2.50m),\n              (3, \"Large\",3.50m),\n              (4, \"x-large\",1m)\n            };\n\n        }\n        public static void ChooseExtraItemsMenu()\n        {\n            Console.WriteLine(\"\\nChoose your Extra Item\");\n            MenuItems.CreateMenu(MenuItems.ExtraMenuItems.extraMenuItemsList);\n            Console.WriteLine(\"[0] Exit Extra Items Menu\");\n        }\n        public static void CreateMenu(List<(int index, string itemName, decimal price)> myList)\n        {\n            for (int i = 0; i < myList.Count; i++)\n            {\n                if (myList[i].itemName.ToLower() == \"extra\" || myList[i].itemName.ToLower() == \"checkout\" || myList[i].itemName.ToLower() == \"fries\" || myList[i].itemName.ToLower() == \"drink\")\n                {\n                    Console.WriteLine($\"[{myList[i].index}] {myList[i].itemName}\");\n                }\n                else\n                {\n                    Console.WriteLine($\"[{myList[i].index}] {myList[i].itemName} - {myList[i].price:C}\");\n                }\n\n            }\n        }\n\n    }\n}\n",
    "Order.cs": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Xml.Schema;\n\nnamespace PizzaBurgerOOP\n{\n    public class Order\n    {\n        public List<Burger> MyBurgers = new List<Burger>();\n        public List<Pizza> MyPizzas = new List<Pizza>();\n        public List<Extra> MyExtras = new List<Extra>();\n\n        public Order()\n        {\n\n        }\n        public void AddToPizzaOrder(Pizza pizza)\n        {\n            this.MyPizzas.Add(pizza);\n        }\n        public void AddToBurgerOrder(Burger burger)\n        {\n            this.MyBurgers.Add(burger);\n        }\n        public void AddToExtraOrder(Extra extra)\n        {\n            this.MyExtras.Add(extra);\n        }\n\n        //--------------Pizzas---------------------\n        public void ShowPizzaOrder()\n        {\n\n            if (MyPizzas.Count > 0)\n            {\n                // Console.WriteLine($\"My Pizza Order:\");\n                for (int i = 0; i < MyPizzas.Count; i++)\n                {\n                    Console.WriteLine($\"Pizzas: {i + 1}\");\n                    foreach (PizzaTopping p in MyPizzas[i].pizzaToppingsList)\n                    {\n                        Console.WriteLine($\"\\t{p.ToppingName}\");\n                    }\n                }\n            }\n\n        }\n        public Order BuildPizzaOrder(Order order, int choice, Pizza pizza)\n        {\n            Console.WriteLine(\"\\nChoose your Pizza Toppings\");\n            MenuItems.CreateMenu(MenuItems.PizzaToppingsMenuItems.pizzaToppingsMenuItemsList);\n            pizza = MenuItems.PizzaToppingsMenuItems.ChoosePizzaToppings(choice, pizza);\n            order.AddToPizzaOrder(pizza);\n            return order;\n        }\n\n        //-----------------Burgers--------------------\n        public void ShowBurgerOrder()\n        {\n            if (MyBurgers.Count > 0)\n            {\n                for (int i = 0; i < MyBurgers.Count; i++)\n                {\n                    Console.WriteLine($\"Burgers: {i + 1}\");\n                    foreach (BurgerTopping p in MyBurgers[i].burgerToppingsList)\n                    {\n                        Console.WriteLine($\"\\t{p.ToppingName}\");\n                    }\n                }\n            }\n        }\n        public Order BuildBurgerOrder(Order order, int choice, Burger burger)\n        {\n            Console.WriteLine(\"\\nChoose your Burger Toppings\");\n            MenuItems.CreateMenu(MenuItems.BurgerToppingsMenuItems.burgerToppingsMenuItemsList);\n            burger = MenuItems.BurgerToppingsMenuItems.ChooseBurgerToppings(choice, burger);\n            order.AddToBurgerOrder(burger);\n            return order;\n        }\n\n        //---------------Extras---------------------\n        public void ShowExtraOrder()\n        {\n            if (MyExtras.Count > 0)\n            {\n                Console.WriteLine($\"Extra Items: {MyExtras.Count}\");\n                for (int i = 0; i < Extra.extraItemsList.Count; i++)\n                {\n                    Console.WriteLine($\"\\t{Extra.extraItemsList[i].extraItemName},{Extra.extraItemsList[i].extraItemSize},{Extra.extraItemsList[i].extraItemSizePrice:C}\");\n\n                }\n            }\n        }\n\n        public Order BuildExtraOrder(int choiceItem, int choiceSize,Order order,Extra extra)\n        {\n            while (choiceItem != 0)\n            {\n                MenuItems.ChooseExtraItemsMenu();          \n                while (!int.TryParse(Console.ReadLine(), out choiceItem))\n                {\n                    Console.Clear();\n                    MenuItems.ChooseExtraItemsMenu();\n                }\n                if (choiceItem > 0 && choiceItem <= MenuItems.ExtraMenuItems.extraMenuItemsList.Count)\n                {\n                    Console.WriteLine($\"Choice of Extra: {MenuItems.ExtraMenuItems.extraMenuItemsList[choiceItem - 1].itemName}\\n\");\n                    Console.WriteLine(\"Item Size: \");\n                    MenuItems.CreateMenu(MenuItems.ItemSizes.itemSizesList);\n                    while (!int.TryParse(Console.ReadLine(), out choiceSize))\n                    {\n                        Console.Clear();\n                        Console.WriteLine($\"Choice of Extra: {MenuItems.ExtraMenuItems.extraMenuItemsList[choiceItem - 1].itemName}\\n\");\n                        Console.WriteLine(\"Item Size: \");\n                        MenuItems.CreateMenu(MenuItems.ItemSizes.itemSizesList);\n\n                        while (choiceSize > MenuItems.ItemSizes.itemSizesList.Count)\n                        {\n                            Console.WriteLine(\"\\tNot a valid Size, please choose a valid option: \");\n                            while (!int.TryParse(Console.ReadLine(), out choiceSize)) { }\n                        }\n                    }\n\n                    if (choiceSize > 0 && choiceSize <= MenuItems.ItemSizes.itemSizesList.Count)\n                    {\n                        Console.WriteLine($\"Chosen Size: {MenuItems.ItemSizes.itemSizesList[choiceSize - 1].itemName}\\n\");\n                        order = Extra.AddExtrasToExtrasListandExtrasOrder(extra,order,choiceItem,choiceSize);\n                    }\n\n                }\n                if (choiceItem > MenuItems.ExtraMenuItems.extraMenuItemsList.Count || choiceSize > MenuItems.ItemSizes.itemSizesList.Count)\n                {\n                    Console.WriteLine(\"Not a valid option, Please Choose Again\");\n                }\n            }\n            return order;\n        }\n\n\n        public decimal CheckOut(decimal personMoney)\n        {\n            decimal itemsTotal = 0;\n            itemsTotal += MyPizzas.Count * MenuItems.MainMenuItems.mainMenuItemsList[1].price;\n\n            itemsTotal += MyBurgers.Count * MenuItems.MainMenuItems.mainMenuItemsList[0].price;\n\n\n            for (int i = 0; i < Extra.extraItemsList.Count; i++)\n            {\n\n                itemsTotal += Extra.extraItemsList[i].extraItemSizePrice;\n\n            }\n\n            for (int i = 0; i < MyBurgers.Count; i++)\n            {\n\n                foreach (BurgerTopping p in MyBurgers[i].burgerToppingsList)\n                {\n                    itemsTotal += p.ToppingPrice;\n\n                }\n            }\n\n            for (int i = 0; i < MyPizzas.Count; i++)\n            {\n\n                foreach (PizzaTopping p in MyPizzas[i].pizzaToppingsList)\n                {\n                    itemsTotal += p.ToppingPrice;\n                }\n            }\n            Console.WriteLine($\"\\nOrder Total: {itemsTotal:C}\\n\");\n            return itemsTotal;\n        }\n\n        public void ClearAllOrdersAndList()\n        {\n            MyExtras.Clear();\n            MyBurgers.Clear();\n            MyPizzas.Clear();\n            Extra.extraItemsList.Clear();\n        }\n\n\n    }\n}\n",
    "Pizza.cs": "using System;\nusing System.Collections.Generic;\n\nnamespace PizzaBurgerOOP\n{\n    public class Pizza\n    {\n        public List<PizzaTopping> pizzaToppingsList = new List<PizzaTopping>();\n\n        public Pizza()\n        {\n\n        }\n\n        public List<PizzaTopping> AddPizzaTopping(string pt, decimal price)\n        {\n            PizzaTopping pizzaTopping = new PizzaTopping();\n\n            //assign the pizza topping variables\n            pizzaTopping.ToppingName = pt;\n            pizzaTopping.ToppingPrice = price;\n            //return pizza topping\n            pizzaToppingsList.Add(pizzaTopping);\n\n            return pizzaToppingsList;\n        }\n        public void ClearPizzaToppings()\n        {\n            pizzaToppingsList.Clear();\n        }\n\n        public void ShowPizza()\n        {\n\n            Console.Clear();\n            foreach (PizzaTopping p in pizzaToppingsList)\n            {\n                Console.WriteLine($\"PIzzaTopping: {p.ToppingName}, PizzaToppingPrice : {p.ToppingPrice}\");\n            }\n\n        }\n\n\n    }\n}\n",
    "PizzaTopping.cs": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\nnamespace PizzaBurgerOOP\n{\n    public class PizzaTopping\n    {\n        private string toppingName;\n        private decimal toppingPrice;\n\n        //default constructor\n        public PizzaTopping()\n        {\n        }\n\n        //overloaded constructor\n        public PizzaTopping(string toppingName, decimal toppingPrice)\n        {\n            this.toppingName = toppingName;\n            this.toppingPrice = toppingPrice;\n        }\n\n        public string ToppingName { get => toppingName; set => toppingName = value; }\n        public decimal ToppingPrice { get => toppingPrice; set => toppingPrice = value; }\n    }\n}\n\n\n",
    "Program.cs": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Design;\nusing System.Runtime.CompilerServices;\nusing System.Xml.Serialization;\n\nnamespace PizzaBurgerOOP\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Clear();\n            Order order = new Order();\n            decimal personMoney = 100m;\n            bool payed = false;\n\n            int input = 1;\n            while (input != 0)\n            {\n                Console.WriteLine(\"Choose Menu Option\");\n                MenuItems.CreateMenu(MenuItems.MainMenuItems.mainMenuItemsList);\n                Console.WriteLine(\"[0] Exit Restaurant\");\n                Console.WriteLine(\"Your pick: \");\n\n                while (!int.TryParse(Console.ReadLine(), out input))\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Choose Menu Option\");\n                    MenuItems.CreateMenu(MenuItems.MainMenuItems.mainMenuItemsList);\n                    Console.WriteLine(\"[0] Exit Restaurant\");\n                    Console.WriteLine(\"You entered an invalid choice\");\n                    Console.Write(\"Pick Again \");\n                }\n\n                Console.WriteLine(\"\");\n\n                switch (input)\n                {\n                    case 1:\n                        //build burger\n                        Burger burger = new Burger();\n                        int choice = 1;\n                        order.BuildBurgerOrder(order, choice, burger);\n                        break;\n                    case 2:\n                        //build pizza\n                        Pizza pizza = new Pizza();\n                        choice = 1;\n                        order.BuildPizzaOrder(order, choice, pizza);\n                        break;\n                    case 3:\n                        //Extra Items\n                        Extra extra = new Extra();\n                        int choiceItem = 1;\n                        int choiceSize = 1;\n                        order.BuildExtraOrder(choiceItem, choiceSize, order, extra);\n                        break;\n                    case 4:\n                        //Checkout\n                        Console.WriteLine(\"\\nThank you for eating with us!!\\n**** Here is your receipt ****\\n\");\n                        order.ShowBurgerOrder();\n                        order.ShowPizzaOrder();\n                        order.ShowExtraOrder();\n                        order.CheckOut(personMoney);\n                        Console.WriteLine(\"\\nCome again!!\\n Press 0 to exit....\\n\");\n                        Console.ReadLine();\n                        Console.Clear();\n                        order.ClearAllOrdersAndList();\n                        payed = true;\n                        break;\n                    default:\n                        char oops;\n                        if (input == 0 && payed == false && (order.MyBurgers.Count + order.MyExtras.Count + order.MyPizzas.Count) > 0)\n                        {\n                            Console.WriteLine($\"\\nOops you forgot to pay, did you mean to Checkout and pay instead? Press Y for yes.\");\n                            while (!char.TryParse(Console.ReadLine(), out oops))\n                            {\n                                Console.WriteLine($\"\\nOops you forgot to pay, did you mean to Checkout and pay instead? Press Y for yes.\");\n                            }\n                            if (oops == 'y' || oops == 'Y')\n                            {\n                                Console.WriteLine(\"\\nThank you for eating with us!!\\n**** Here is your receipt ****\\n\");\n                                order.ShowBurgerOrder();\n                                order.ShowPizzaOrder();\n                                order.ShowExtraOrder();\n                                order.CheckOut(personMoney);\n                                Console.WriteLine(\"\\nCome again!!\\n Press 0 to exit....\\n\");\n                                Console.ReadLine();\n                                Console.Clear();\n                                order.ClearAllOrdersAndList();\n                                payed = true;\n                            }\n                            else\n                            {\n                                input = 0;\n                                payed = false;\n                                Console.WriteLine($\"YOU LEFT WITHOUT PAYING \" + order.CheckOut(personMoney).ToString(\"C\") + \"\\nSHAME ON YOU!!!!!\");\n                                Console.WriteLine(\"\\n\\nPress Enter to Exit Program....\");\n                                Console.ReadLine();\n                                //continue;\n                            }\n                        }\n                        else\n                        {\n                            Console.WriteLine(\"\\n\\nPress Enter to Exit Program....\");\n                            Console.ReadLine();\n                        }\n                        break;\n                }\n            }\n\n        }\n    }\n}\n",
    "README.md": "# PizzaAndBurgersRestaurant\nMock restaurant console application written in C# \n\nUser runs the program and is able to select from a menu of Main Menu Items, Toppings, and Extras. \nOnce Checkout, it totals the cost of purchase.\n\n"
  }
}